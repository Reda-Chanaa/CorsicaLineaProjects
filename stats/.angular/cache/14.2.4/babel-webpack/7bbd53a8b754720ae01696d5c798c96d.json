{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport { __awaiter } from \"tslib\";\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { FormControl } from '@angular/forms';\nimport * as Highcharts from \"highcharts\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"@angular/material/progress-spinner\";\n\nfunction ChartAlgComponent_mat_spinner_18_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 15);\n  }\n\n  if (rf & 2) {\n    i0.ɵɵproperty(\"diameter\", 100);\n  }\n} // class pour les requettes GET et POST.\n\n\nexport var ApiStat = /*#__PURE__*/(function () {\n  var ApiStat = /*#__PURE__*/function () {\n    function ApiStat(http) {\n      _classCallCheck(this, ApiStat);\n\n      this.http = http;\n      this.baseurl = \"http://127.0.0.1:8000\";\n    }\n\n    _createClass(ApiStat, [{\n      key: \"getReport\",\n      value: function getReport(annee) {\n        var formData = new FormData();\n        formData.append('annee', annee);\n        console.log(formData);\n        var header = new HttpHeaders();\n        header.append('Content-Type', 'multipart/form-data');\n        return this.http.post(this.baseurl + '/report-alg/', formData, {\n          headers: header\n        });\n      }\n    }]);\n\n    return ApiStat;\n  }();\n\n  ApiStat.ɵfac = function ApiStat_Factory(t) {\n    return new (t || ApiStat)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ApiStat.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ApiStat,\n    factory: ApiStat.ɵfac,\n    providedIn: 'root'\n  });\n  return ApiStat;\n})();\nexport var ChartAlgComponent = /*#__PURE__*/(function () {\n  var ChartAlgComponent = /*#__PURE__*/function () {\n    function ChartAlgComponent(DATACLEANING) {\n      _classCallCheck(this, ChartAlgComponent);\n\n      this.DATACLEANING = DATACLEANING;\n      this.Fannee = new FormControl('');\n      this.value = 10;\n    }\n\n    _createClass(ChartAlgComponent, [{\n      key: \"changed\",\n      value: function changed(value) {\n        this.annee = value.target.value;\n      }\n    }, {\n      key: \"ngOnInit\",\n      value: function ngOnInit() {}\n    }, {\n      key: \"getReport\",\n      value: function getReport() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n          var _this = this;\n\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  this.value = 0;\n                  this.DATACLEANING.getReport(this.annee).subscribe(function (data) {\n                    _this.value = 10;\n                    _this.data = data;\n                    console.log(data[0]);\n\n                    _this.getOptions(_this.data);\n\n                    Highcharts.chart('container', _this.options);\n                  }, function (error) {\n                    console.log(\"error \", error);\n                  });\n\n                case 2:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, this);\n        }));\n      }\n    }, {\n      key: \"dashboard\",\n      value: function dashboard() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  _context2.next = 2;\n                  return this.getReport();\n\n                case 2:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n    }, {\n      key: \"getOptions\",\n      value: function getOptions(data) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var df, index, series1;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  df = [];\n                  console.log(data.length);\n\n                  for (index = 0; index < data.length; index++) {\n                    series1 = {\n                      name: 0,\n                      data: []\n                    };\n                    series1.name = index + 1;\n                    series1.data = [Number(data[index].Jan), Number(data[index].Feb), Number(data[index].Mar), Number(data[index].Apr), Number(data[index].May), Number(data[index].Jun), Number(data[index].Jul), Number(data[index].Aug), Number(data[index].Sep), Number(data[index].Oct), Number(data[index].Nov), Number(data[index].Dec)];\n                    df.push(series1);\n                  }\n\n                  console.log(df);\n                  this.options = {\n                    chart: {\n                      type: 'column'\n                    },\n                    title: {\n                      text: 'Report Quotidien CSC'\n                    },\n                    subtitle: {\n                      text: 'Diffusion des écarts'\n                    },\n                    xAxis: {\n                      categories: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n                      crosshair: true\n                    },\n                    yAxis: {\n                      min: -200,\n                      title: {\n                        text: 'Ecarts'\n                      }\n                    },\n                    tooltip: {\n                      headerFormat: '<span style=\"font-size:10px\">{point.key}</span><table>',\n                      pointFormat: '<tr><td style=\"color:{series.color};padding:0\">{series.name}: </td>' + '<td style=\"padding:0\"><b>{point.y}</b></td></tr>',\n                      footerFormat: '</table>',\n                      shared: true,\n                      useHTML: true\n                    },\n                    plotOptions: {\n                      column: {\n                        pointPadding: 0.2,\n                        borderWidth: 0.01\n                      }\n                    },\n                    series: df\n                  };\n                  return _context3.abrupt(\"return\", this.options);\n\n                case 6:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      }\n    }]);\n\n    return ChartAlgComponent;\n  }();\n\n  ChartAlgComponent.ɵfac = function ChartAlgComponent_Factory(t) {\n    return new (t || ChartAlgComponent)(i0.ɵɵdirectiveInject(ApiStat));\n  };\n\n  ChartAlgComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartAlgComponent,\n    selectors: [[\"app-chart-alg\"]],\n    features: [i0.ɵɵProvidersFeature([ApiStat])],\n    decls: 22,\n    vars: 3,\n    consts: [[1, \"panel-header\", \"panel-header-sm\"], [1, \"main-content\"], [1, \"row\"], [1, \"col-md-12\"], [1, \"card\"], [1, \"card-header\"], [1, \"card-title\"], [1, \"card-body\"], [\"for\", \"annee\"], [\"value\", \"0\", \"placeholder\", \"Annee\", \"type\", \"number\", 3, \"formControl\", \"ngModel\", \"ngModelChange\", \"change\"], [1, \"btn\", \"pull-right\", 2, \"background-color\", \"rgb(256,54,54)\", 3, \"click\"], [\"style\", \"stroke: rgb(256,54,54);\", \"strokeWidth\", \"3\", 3, \"diameter\", 4, \"ngIf\"], [1, \"highcharts-figure\", 2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\"], [\"id\", \"container\", 2, \"width\", \"100%\", \"height\", \"700px\", \"display\", \"block\"], [1, \"highcharts-description\"], [\"strokeWidth\", \"3\", 2, \"stroke\", \"rgb(256,54,54)\", 3, \"diameter\"]],\n    template: function ChartAlgComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"div\", 0);\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\", 5)(6, \"h4\", 6);\n        i0.ɵɵtext(7, \"Report Quotidien ALG\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(8, \"div\", 7)(9, \"label\", 8)(10, \"b\");\n        i0.ɵɵtext(11, \" Choisir l'ann\\xE9e : \");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(12, \"input\", 9);\n        i0.ɵɵlistener(\"ngModelChange\", function ChartAlgComponent_Template_input_ngModelChange_12_listener($event) {\n          return ctx.annee = $event;\n        })(\"change\", function ChartAlgComponent_Template_input_change_12_listener($event) {\n          return ctx.changed($event);\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(13, \"br\");\n        i0.ɵɵelementStart(14, \"button\", 10);\n        i0.ɵɵlistener(\"click\", function ChartAlgComponent_Template_button_click_14_listener() {\n          return ctx.dashboard();\n        });\n        i0.ɵɵelementStart(15, \"b\");\n        i0.ɵɵtext(16, \"Report Quotidien\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelement(17, \"br\");\n        i0.ɵɵtemplate(18, ChartAlgComponent_mat_spinner_18_Template, 1, 1, \"mat-spinner\", 11);\n        i0.ɵɵelementStart(19, \"figure\", 12);\n        i0.ɵɵelement(20, \"div\", 13)(21, \"p\", 14);\n        i0.ɵɵelementEnd()()()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(12);\n        i0.ɵɵproperty(\"formControl\", ctx.Fannee)(\"ngModel\", ctx.annee);\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"ngIf\", ctx.value === 0);\n      }\n    },\n    dependencies: [i2.NgIf, i3.DefaultValueAccessor, i3.NumberValueAccessor, i3.NgControlStatus, i3.FormControlDirective, i4.MatProgressSpinner]\n  });\n  return ChartAlgComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}