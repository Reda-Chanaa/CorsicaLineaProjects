{"ast":null,"code":"import _toConsumableArray from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _inherits from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _createClass from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"C:/Users/rchanaa/OneDrive - corsicalinea.com/Documents/Reporting Stats/CorsicaLineaProjects/stats/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport { CdkTableModule } from '@angular/cdk/table';\nimport { NgModule, ɵɵdefineInjectable, Injectable, InjectionToken, ɵɵinject, Optional, Inject, INJECTOR, Injector, EventEmitter, Directive, Renderer2, Input, Output } from '@angular/core';\nimport { __awaiter } from 'tslib';\nimport { saveAs } from 'file-saver-es';\nimport * as ɵngcc0 from '@angular/core';\nvar CdkTableExporterModule = /*#__PURE__*/(function () {\n  var CdkTableExporterModule = /*#__PURE__*/_createClass(function CdkTableExporterModule() {\n    _classCallCheck(this, CdkTableExporterModule);\n  });\n\n  CdkTableExporterModule.ɵfac = function CdkTableExporterModule_Factory(t) {\n    return new (t || CdkTableExporterModule)();\n  };\n\n  CdkTableExporterModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: CdkTableExporterModule\n  });\n  CdkTableExporterModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    imports: [CdkTableModule]\n  });\n  return CdkTableExporterModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(CdkTableExporterModule, {\n    imports: function imports() {\n      return [CdkTableModule];\n    }\n  });\n})();\n\nvar ExportType = /*#__PURE__*/(function () {\n  (function (ExportType) {\n    ExportType[\"XLS\"] = \"xls\";\n    ExportType[\"XLSX\"] = \"xlsx\";\n    ExportType[\"CSV\"] = \"csv\";\n    ExportType[\"TXT\"] = \"txt\";\n    ExportType[\"JSON\"] = \"json\";\n    ExportType[\"OTHER\"] = \"other\";\n  })(ExportType || (ExportType = {}));\n\n  return ExportType;\n})();\nvar DataExtractorService = /*#__PURE__*/(function () {\n  var DataExtractorService = /*#__PURE__*/function () {\n    function DataExtractorService() {\n      _classCallCheck(this, DataExtractorService);\n    }\n\n    _createClass(DataExtractorService, [{\n      key: \"extractRows\",\n      value: function extractRows(cdkTable, hiddenColumns, outlet) {\n        return this.getRowsAsJsonArray(cdkTable, hiddenColumns, outlet !== null && outlet !== void 0 ? outlet : cdkTable._rowOutlet);\n      }\n    }, {\n      key: \"getRowsAsJsonArray\",\n      value: function getRowsAsJsonArray(cdkTable, hiddenColumns, outlet) {\n        var renderedRows = this.getRenderedRows(cdkTable, outlet);\n        return this.convertToJsonArray(hiddenColumns, renderedRows);\n      }\n    }, {\n      key: \"getRenderedRows\",\n      value: function getRenderedRows(cdkTable, outlet) {\n        return cdkTable._getRenderedRows(outlet);\n      }\n    }, {\n      key: \"convertToJsonArray\",\n      value: function convertToJsonArray(hiddenColumns, rows) {\n        var result = new Array(); // tslint:disable-next-line:prefer-for-of\n\n        for (var i = 0; i < rows.length; i++) {\n          var row = this.convertRow(hiddenColumns, rows[i]);\n          result.push(this.createExcelItem(row));\n        }\n\n        return result;\n      }\n    }, {\n      key: \"convertRow\",\n      value: function convertRow(hiddenColumns, row) {\n        var result = new Array();\n        var cells = row.children;\n\n        for (var i = 0; i < cells.length; i++) {\n          if (!this.shouldHide(hiddenColumns, i)) {\n            var element = cells.item(i).innerText.trim();\n            result.push(element);\n          }\n        }\n\n        return result;\n      }\n    }, {\n      key: \"shouldHide\",\n      value: function shouldHide(hiddenColumns, columnIndex) {\n        if (hiddenColumns && hiddenColumns.includes(columnIndex)) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"createExcelItem\",\n      value: function createExcelItem(row) {\n        return Object.assign({}, row);\n      }\n    }]);\n\n    return DataExtractorService;\n  }();\n\n  DataExtractorService.ɵfac = function DataExtractorService_Factory(t) {\n    return new (t || DataExtractorService)();\n  };\n\n  DataExtractorService.ɵprov = ɵɵdefineInjectable({\n    factory: function DataExtractorService_Factory() {\n      return new DataExtractorService();\n    },\n    token: DataExtractorService,\n    providedIn: \"root\"\n  });\n  return DataExtractorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar Mime = /*#__PURE__*/_createClass(function Mime(extension, contentTypeHeader) {\n  _classCallCheck(this, Mime);\n\n  this.extension = extension;\n  this.contentTypeHeader = contentTypeHeader;\n});\n\nvar MAT_TABLE_EXPORTER = 'mat-table-exporter';\nvar TYPE_ARRAY = 'array';\nvar CHAR_SET_UTF = ';charset=utf-';\nvar CHAR_SET_UTF_8 = CHAR_SET_UTF + '8';\nvar CONTENT_TYPE_TEXT = ExportType.TXT + '/';\nvar CONTENT_TYPE_APPLICATION = 'application/';\nvar CONTENT_TYPE_EXCEL = CONTENT_TYPE_APPLICATION + 'octet-stream';\nvar DOT = '.';\nvar COMMA = ',';\nvar EXTENSION_XLS = DOT + ExportType.XLS;\nvar EXTENSION_XLSX = DOT + ExportType.XLSX;\nvar EXTENSION_CSV = DOT + ExportType.CSV;\nvar EXTENSION_JSON = DOT + ExportType.JSON;\nvar EXTENSION_TEXT = DOT + ExportType.TXT;\nvar MIME_EXCEL_XLS = new Mime(EXTENSION_XLS, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nvar MIME_EXCEL_XLSX = new Mime(EXTENSION_XLSX, CONTENT_TYPE_EXCEL + CHAR_SET_UTF_8);\nvar MIME_JSON = new Mime(EXTENSION_JSON, CONTENT_TYPE_TEXT + JSON + CHAR_SET_UTF_8);\nvar MIME_TXT = new Mime(EXTENSION_TEXT, CONTENT_TYPE_TEXT + ExportType.TXT + CHAR_SET_UTF_8);\nvar MIME_CSV = new Mime(EXTENSION_CSV, CONTENT_TYPE_TEXT + ExportType.CSV + CHAR_SET_UTF_8);\nvar REF = '!ref';\nvar XLS_REGEX = DOT + '*\\.' + ExportType.XLS + '$';\nvar RETURN = '\\n';\nvar TAB = '\\t';\nvar XLSX_COLS = '!cols';\nvar BOM = \"\\uFEFF\";\nvar XLSX_LIGHTWEIGHT = new InjectionToken('XLSX_LIGHTWEIGHT');\n\nvar FileUtil = /*#__PURE__*/function () {\n  function FileUtil() {\n    _classCallCheck(this, FileUtil);\n  }\n\n  _createClass(FileUtil, null, [{\n    key: \"save\",\n    value: function save(content, mime, options) {\n      var blob = new Blob([content], {\n        type: mime.contentTypeHeader\n      });\n      var fileName = MAT_TABLE_EXPORTER;\n\n      if (options && options.fileName) {\n        fileName = options.fileName;\n      }\n\n      saveAs(blob, fileName + mime.extension);\n    }\n  }, {\n    key: \"isXls\",\n    value: function isXls(fileName) {\n      return fileName.toLowerCase().match(XLS_REGEX) != null;\n    }\n  }, {\n    key: \"identifyExportType\",\n    value: function identifyExportType(fileName) {\n      if (fileName && FileUtil.isXls(fileName)) {\n        return ExportType.XLS;\n      } else {\n        return ExportType.XLSX;\n      }\n    }\n  }, {\n    key: \"removeExtension\",\n    value: function removeExtension(options) {\n      options.fileName = options.fileName.split(DOT)[0];\n    }\n  }]);\n\n  return FileUtil;\n}();\n\nvar FileExporter = /*#__PURE__*/function () {\n  function FileExporter() {\n    _classCallCheck(this, FileExporter);\n  }\n\n  _createClass(FileExporter, [{\n    key: \"export\",\n    value: function _export(rows, options) {\n      if (!rows) {\n        throw new Error('Empty json array is provided, rows parameter is mandatory!');\n      }\n\n      var mimeType = this.getMimeType();\n      this.createContent(rows, options).then(function (content) {\n        FileUtil.save(content, mimeType, options);\n      });\n    }\n  }]);\n\n  return FileExporter;\n}();\n/**\r\n * An angular service class that is used to create files out of json object arrays.\r\n */\n\n\nvar WorksheetExporter = /*#__PURE__*/function (_FileExporter) {\n  _inherits(WorksheetExporter, _FileExporter);\n\n  var _super = _createSuper(WorksheetExporter);\n\n  function WorksheetExporter(sheetJsHelper) {\n    var _this;\n\n    _classCallCheck(this, WorksheetExporter);\n\n    _this = _super.call(this);\n    _this.sheetJsHelper = sheetJsHelper;\n    return _this;\n  }\n\n  _createClass(WorksheetExporter, [{\n    key: \"createContent\",\n    value: function createContent(rows, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var workSheet;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.sheetJsHelper.getXlsx();\n\n              case 2:\n                workSheet = _context.sent.utils.json_to_sheet(rows, {\n                  skipHeader: true // we don't want to see object properties as our headers\n\n                });\n                _context.next = 5;\n                return this.workSheetToContent(workSheet, options);\n\n              case 5:\n                return _context.abrupt(\"return\", _context.sent);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }]);\n\n  return WorksheetExporter;\n}(FileExporter);\n\nvar SheetjsHelperService = /*#__PURE__*/(function () {\n  var SheetjsHelperService = /*#__PURE__*/function () {\n    function SheetjsHelperService(xlsxLightweight) {\n      _classCallCheck(this, SheetjsHelperService);\n\n      this.xlsxLightweight = xlsxLightweight;\n    }\n\n    _createClass(SheetjsHelperService, [{\n      key: \"getXlsx\",\n      value: function getXlsx() {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) {\n              switch (_context2.prev = _context2.next) {\n                case 0:\n                  if (!this.xlsxLightweight) {\n                    _context2.next = 6;\n                    break;\n                  }\n\n                  _context2.next = 3;\n                  return import('xlsx/dist/xlsx.mini.min');\n\n                case 3:\n                  return _context2.abrupt(\"return\", _context2.sent);\n\n                case 6:\n                  _context2.next = 8;\n                  return import('xlsx');\n\n                case 8:\n                  return _context2.abrupt(\"return\", _context2.sent);\n\n                case 9:\n                case \"end\":\n                  return _context2.stop();\n              }\n            }\n          }, _callee2, this);\n        }));\n      }\n    }]);\n\n    return SheetjsHelperService;\n  }();\n\n  SheetjsHelperService.ɵfac = function SheetjsHelperService_Factory(t) {\n    return new (t || SheetjsHelperService)(ɵngcc0.ɵɵinject(XLSX_LIGHTWEIGHT, 8));\n  };\n\n  SheetjsHelperService.ɵprov = ɵɵdefineInjectable({\n    factory: function SheetjsHelperService_Factory() {\n      return new SheetjsHelperService(ɵɵinject(XLSX_LIGHTWEIGHT, 8));\n    },\n    token: SheetjsHelperService,\n    providedIn: \"root\"\n  });\n  return SheetjsHelperService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar CsvExporterService = /*#__PURE__*/(function () {\n  var CsvExporterService = /*#__PURE__*/function (_WorksheetExporter) {\n    _inherits(CsvExporterService, _WorksheetExporter);\n\n    var _super2 = _createSuper(CsvExporterService);\n\n    function CsvExporterService(sheetJsHelper) {\n      _classCallCheck(this, CsvExporterService);\n\n      return _super2.call(this, sheetJsHelper);\n    }\n\n    _createClass(CsvExporterService, [{\n      key: \"workSheetToContent\",\n      value: function workSheetToContent(worksheet, options) {\n        var _a;\n\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n          var content;\n          return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n            while (1) {\n              switch (_context3.prev = _context3.next) {\n                case 0:\n                  _context3.next = 2;\n                  return this.sheetJsHelper.getXlsx();\n\n                case 2:\n                  content = _context3.sent.utils.sheet_to_csv(worksheet, {\n                    FS: (_a = options === null || options === void 0 ? void 0 : options.delimiter) !== null && _a !== void 0 ? _a : COMMA\n                  });\n                  return _context3.abrupt(\"return\", BOM + content);\n\n                case 4:\n                case \"end\":\n                  return _context3.stop();\n              }\n            }\n          }, _callee3, this);\n        }));\n      }\n    }, {\n      key: \"getMimeType\",\n      value: function getMimeType() {\n        return MIME_CSV;\n      }\n    }]);\n\n    return CsvExporterService;\n  }(WorksheetExporter);\n\n  CsvExporterService.ɵfac = function CsvExporterService_Factory(t) {\n    return new (t || CsvExporterService)(ɵngcc0.ɵɵinject(SheetjsHelperService));\n  };\n\n  CsvExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function CsvExporterService_Factory() {\n      return new CsvExporterService(ɵɵinject(SheetjsHelperService));\n    },\n    token: CsvExporterService,\n    providedIn: \"root\"\n  });\n  return CsvExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar TxtExporterService = /*#__PURE__*/(function () {\n  var TxtExporterService = /*#__PURE__*/function (_FileExporter2) {\n    _inherits(TxtExporterService, _FileExporter2);\n\n    var _super3 = _createSuper(TxtExporterService);\n\n    function TxtExporterService() {\n      _classCallCheck(this, TxtExporterService);\n\n      return _super3.call(this);\n    }\n\n    _createClass(TxtExporterService, [{\n      key: \"createContent\",\n      value: function createContent(rows, options) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n          var _this2 = this;\n\n          var content;\n          return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  content = '';\n                  rows.forEach(function (element) {\n                    content += Object.values(element).join(_this2.getDelimiter(options)) + RETURN;\n                  });\n                  return _context4.abrupt(\"return\", content);\n\n                case 3:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4);\n        }));\n      }\n    }, {\n      key: \"getMimeType\",\n      value: function getMimeType() {\n        return MIME_TXT;\n      }\n    }, {\n      key: \"getDelimiter\",\n      value: function getDelimiter(options) {\n        if (options && options.delimiter) {\n          return options.delimiter;\n        } else {\n          return TAB;\n        }\n      }\n    }]);\n\n    return TxtExporterService;\n  }(FileExporter);\n\n  TxtExporterService.ɵfac = function TxtExporterService_Factory(t) {\n    return new (t || TxtExporterService)();\n  };\n\n  TxtExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function TxtExporterService_Factory() {\n      return new TxtExporterService();\n    },\n    token: TxtExporterService,\n    providedIn: \"root\"\n  });\n  return TxtExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar XlsExporterService = /*#__PURE__*/(function () {\n  var XlsExporterService = /*#__PURE__*/function (_WorksheetExporter2) {\n    _inherits(XlsExporterService, _WorksheetExporter2);\n\n    var _super4 = _createSuper(XlsExporterService);\n\n    function XlsExporterService(sheetJsHelper) {\n      _classCallCheck(this, XlsExporterService);\n\n      return _super4.call(this, sheetJsHelper);\n    }\n\n    _createClass(XlsExporterService, [{\n      key: \"workSheetToContent\",\n      value: function workSheetToContent(worksheet) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n          var _yield$this$sheetJsHe, utils, write, workBook;\n\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) {\n              switch (_context5.prev = _context5.next) {\n                case 0:\n                  _context5.next = 2;\n                  return this.sheetJsHelper.getXlsx();\n\n                case 2:\n                  _yield$this$sheetJsHe = _context5.sent;\n                  utils = _yield$this$sheetJsHe.utils;\n                  write = _yield$this$sheetJsHe.write;\n                  workBook = utils.book_new();\n\n                  if (options.columnWidths) {\n                    worksheet[XLSX_COLS] = this.convertToWch(options.columnWidths);\n                  }\n\n                  this.correctTypes(options);\n                  utils.book_append_sheet(workBook, worksheet, options.sheet);\n                  return _context5.abrupt(\"return\", write(workBook, options));\n\n                case 10:\n                case \"end\":\n                  return _context5.stop();\n              }\n            }\n          }, _callee5, this);\n        }));\n      }\n    }, {\n      key: \"getMimeType\",\n      value: function getMimeType() {\n        return MIME_EXCEL_XLS;\n      }\n    }, {\n      key: \"correctTypes\",\n      value: function correctTypes(options) {\n        if (!options.type) {\n          options.type = TYPE_ARRAY;\n        }\n\n        options.bookType = this.getMimeType().extension.replace('.', ''); // sheetjs requires bookingType for excel format\n      }\n    }, {\n      key: \"convertToWch\",\n      value: function convertToWch(columnWidths) {\n        return columnWidths.map(function (width) {\n          return {\n            wch: width\n          };\n        });\n      }\n    }]);\n\n    return XlsExporterService;\n  }(WorksheetExporter);\n\n  XlsExporterService.ɵfac = function XlsExporterService_Factory(t) {\n    return new (t || XlsExporterService)(ɵngcc0.ɵɵinject(SheetjsHelperService));\n  };\n\n  XlsExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function XlsExporterService_Factory() {\n      return new XlsExporterService(ɵɵinject(SheetjsHelperService));\n    },\n    token: XlsExporterService,\n    providedIn: \"root\"\n  });\n  return XlsExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar JsonExporterService = /*#__PURE__*/(function () {\n  var JsonExporterService = /*#__PURE__*/function (_FileExporter3) {\n    _inherits(JsonExporterService, _FileExporter3);\n\n    var _super5 = _createSuper(JsonExporterService);\n\n    function JsonExporterService() {\n      _classCallCheck(this, JsonExporterService);\n\n      return _super5.call(this);\n    }\n\n    _createClass(JsonExporterService, [{\n      key: \"createContent\",\n      value: function createContent(rows, options) {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n          return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n            while (1) {\n              switch (_context6.prev = _context6.next) {\n                case 0:\n                  return _context6.abrupt(\"return\", JSON.stringify(rows));\n\n                case 1:\n                case \"end\":\n                  return _context6.stop();\n              }\n            }\n          }, _callee6);\n        }));\n      }\n    }, {\n      key: \"getMimeType\",\n      value: function getMimeType() {\n        return MIME_JSON;\n      }\n    }]);\n\n    return JsonExporterService;\n  }(FileExporter);\n\n  JsonExporterService.ɵfac = function JsonExporterService_Factory(t) {\n    return new (t || JsonExporterService)();\n  };\n\n  JsonExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function JsonExporterService_Factory() {\n      return new JsonExporterService();\n    },\n    token: JsonExporterService,\n    providedIn: \"root\"\n  });\n  return JsonExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar XlsxExporterService = /*#__PURE__*/(function () {\n  var XlsxExporterService = /*#__PURE__*/function (_XlsExporterService) {\n    _inherits(XlsxExporterService, _XlsExporterService);\n\n    var _super6 = _createSuper(XlsxExporterService);\n\n    function XlsxExporterService(sheetJsHelper) {\n      _classCallCheck(this, XlsxExporterService);\n\n      return _super6.call(this, sheetJsHelper);\n    } // override\n\n\n    _createClass(XlsxExporterService, [{\n      key: \"getMimeType\",\n      value: function getMimeType() {\n        return MIME_EXCEL_XLSX;\n      }\n    }]);\n\n    return XlsxExporterService;\n  }(XlsExporterService);\n\n  XlsxExporterService.ɵfac = function XlsxExporterService_Factory(t) {\n    return new (t || XlsxExporterService)(ɵngcc0.ɵɵinject(SheetjsHelperService));\n  };\n\n  XlsxExporterService.ɵprov = ɵɵdefineInjectable({\n    factory: function XlsxExporterService_Factory() {\n      return new XlsxExporterService(ɵɵinject(SheetjsHelperService));\n    },\n    token: XlsxExporterService,\n    providedIn: \"root\"\n  });\n  return XlsxExporterService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nvar ServiceLocatorService = /*#__PURE__*/(function () {\n  var ServiceLocatorService = /*#__PURE__*/function () {\n    function ServiceLocatorService(injector) {\n      _classCallCheck(this, ServiceLocatorService);\n\n      this.injector = injector;\n    }\n\n    _createClass(ServiceLocatorService, [{\n      key: \"getService\",\n      value: function getService(exportType) {\n        switch (exportType) {\n          case ExportType.XLS.valueOf():\n            return this.injector.get(XlsExporterService);\n\n          case ExportType.XLSX.valueOf():\n            return this.injector.get(XlsxExporterService);\n\n          case ExportType.JSON.valueOf():\n            return this.injector.get(JsonExporterService);\n\n          case ExportType.TXT.valueOf():\n            return this.injector.get(TxtExporterService);\n\n          case ExportType.CSV.valueOf():\n            return this.injector.get(CsvExporterService);\n\n          case ExportType.OTHER.valueOf():\n            return null;\n\n          default:\n            return this.injector.get(XlsxExporterService);\n        }\n      }\n    }]);\n\n    return ServiceLocatorService;\n  }();\n\n  ServiceLocatorService.ɵfac = function ServiceLocatorService_Factory(t) {\n    return new (t || ServiceLocatorService)(ɵngcc0.ɵɵinject(ɵngcc0.Injector));\n  };\n\n  ServiceLocatorService.ɵprov = ɵɵdefineInjectable({\n    factory: function ServiceLocatorService_Factory() {\n      return new ServiceLocatorService(ɵɵinject(INJECTOR));\n    },\n    token: ServiceLocatorService,\n    providedIn: \"root\"\n  });\n  return ServiceLocatorService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/**\r\n * Exporter class for CdkTable. Abstracts the varying behaviors among different CdkTable implementations.\r\n */\n\n\nvar CdkTableExporter = /*#__PURE__*/(function () {\n  var CdkTableExporter = /*#__PURE__*/function () {\n    function CdkTableExporter(renderer, serviceLocator, dataExtractor, _cdkTable) {\n      _classCallCheck(this, CdkTableExporter);\n\n      this.renderer = renderer;\n      this.serviceLocator = serviceLocator;\n      this.dataExtractor = dataExtractor;\n      this._cdkTable = _cdkTable;\n      this.exportCompleted = new EventEmitter();\n      this.exportStarted = new EventEmitter();\n    }\n    /**\r\n     * Triggers page event chain thus extracting and exporting all the rows in nativetables in pages\r\n     */\n\n\n    _createClass(CdkTableExporter, [{\n      key: \"exportTable\",\n      value: function exportTable(exportType, options) {\n        this.loadExporter(exportType);\n        this._options = options;\n        this.exportStarted.emit();\n        this._isIterating = true;\n        this._isExporting = true;\n        this._data = new Array();\n        this.extractTableHeader();\n\n        try {\n          this.exportWithPagination();\n        } catch (notPaginated) {\n          this.exportSinglePage();\n        }\n      }\n    }, {\n      key: \"toggleRow\",\n      value: function toggleRow(index) {\n        var paginatedRowIndex = this.getPaginatedRowIndex(index);\n\n        if (this.isToggleOn(paginatedRowIndex)) {\n          this.toggleOff(paginatedRowIndex);\n        } else {\n          this.toggleOn(paginatedRowIndex);\n        }\n      }\n      /**\r\n       * This event will clear rows selection done using toggleRow functionality\r\n       */\n\n    }, {\n      key: \"resetToggleRows\",\n      value: function resetToggleRows() {\n        this._selectedRows = [];\n      }\n    }, {\n      key: \"toggleOn\",\n      value: function toggleOn(index) {\n        this._selectedRows = [].concat(_toConsumableArray(this._selectedRows || []), [index]);\n      }\n    }, {\n      key: \"toggleOff\",\n      value: function toggleOff(index) {\n        this._selectedRows = this._selectedRows.filter(function (x) {\n          return x !== index;\n        });\n      }\n    }, {\n      key: \"isToggleOn\",\n      value: function isToggleOn(index) {\n        var _a;\n\n        return (_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.includes(index);\n      }\n    }, {\n      key: \"loadExporter\",\n      value: function loadExporter(exportType) {\n        if (exportType === ExportType.OTHER.valueOf()) {\n          this._exporterService = this.exporter;\n        } else {\n          this._exporterService = this.serviceLocator.getService(exportType);\n        }\n      }\n    }, {\n      key: \"exportWithPagination\",\n      value: function exportWithPagination() {\n        this._initialPageIndex = this.getCurrentPageIndex();\n        this.initPageHandler();\n        this.goToPage(0);\n      }\n    }, {\n      key: \"exportSinglePage\",\n      value: function exportSinglePage() {\n        this.extractDataOnCurrentPage();\n        this.extractTableFooter();\n        this.exportExtractedData();\n      }\n    }, {\n      key: \"extractDataOnCurrentPage\",\n      value: function extractDataOnCurrentPage() {\n        var rows = this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns);\n        this._data = this._data.concat(this.getSelectedRows(rows));\n      }\n    }, {\n      key: \"getSelectedRows\",\n      value: function getSelectedRows(rows) {\n        var _this3 = this;\n\n        if (this.isSelectiveExport()) {\n          return rows.filter(function (_, i) {\n            return _this3._selectedRows.includes(_this3.getPaginatedRowIndex(i));\n          });\n        } else {\n          return rows;\n        }\n      }\n    }, {\n      key: \"isSelectiveExport\",\n      value: function isSelectiveExport() {\n        return this._selectedRows && !this.isMasterToggleOff() && !this.isMasterToggleOn();\n      }\n    }, {\n      key: \"isMasterToggleOn\",\n      value: function isMasterToggleOn() {\n        return this.compareSelectedRowCount(this.getTotalItemsCount());\n      }\n    }, {\n      key: \"isMasterToggleOff\",\n      value: function isMasterToggleOff() {\n        return this.compareSelectedRowCount(0);\n      }\n    }, {\n      key: \"compareSelectedRowCount\",\n      value: function compareSelectedRowCount(rowCount) {\n        var _a;\n\n        return !!(((_a = this._selectedRows) === null || _a === void 0 ? void 0 : _a.length) === rowCount);\n      }\n    }, {\n      key: \"initPageHandler\",\n      value: function initPageHandler() {\n        var _this4 = this;\n\n        if (!this._subscription) {\n          this._subscription = this.getPageChangeObservable().subscribe(function () {\n            setTimeout(function () {\n              if (_this4._isIterating) {\n                _this4.extractDataOnCurrentPage();\n\n                if (_this4.hasNextPage()) {\n                  _this4.nextPage();\n                } else {\n                  _this4._isIterating = false;\n\n                  _this4.goToPage(_this4._initialPageIndex);\n                }\n              } else if (_this4._isExporting) {\n                _this4._isExporting = false;\n\n                _this4.extractTableFooter();\n\n                _this4.exportExtractedData();\n              }\n            });\n          });\n        }\n      }\n    }, {\n      key: \"exportExtractedData\",\n      value: function exportExtractedData() {\n        this._exporterService.export(this._data, this._options);\n\n        this._data = new Array();\n        this.exportCompleted.emit();\n      }\n    }, {\n      key: \"extractSpecialRows\",\n      value: function extractSpecialRows(outlet) {\n        var _this$_data;\n\n        (_this$_data = this._data).push.apply(_this$_data, _toConsumableArray(this.dataExtractor.extractRows(this._cdkTable, this.hiddenColumns, outlet)));\n      }\n    }, {\n      key: \"extractTableHeader\",\n      value: function extractTableHeader() {\n        this.extractSpecialRows(this._cdkTable._headerRowOutlet);\n      }\n    }, {\n      key: \"extractTableFooter\",\n      value: function extractTableFooter() {\n        this.extractSpecialRows(this._cdkTable._footerRowOutlet);\n      }\n    }, {\n      key: \"hasNextPage\",\n      value: function hasNextPage() {\n        if (this.getCurrentPageIndex() < this.getPageCount() - 1) {\n          return true;\n        } else {\n          return false;\n        }\n      }\n    }, {\n      key: \"nextPage\",\n      value: function nextPage() {\n        this.goToPage(this.getCurrentPageIndex() + 1);\n      }\n    }, {\n      key: \"getPaginatedRowIndex\",\n      value: function getPaginatedRowIndex(index) {\n        return index + this.getPageSize() * this.getCurrentPageIndex();\n      }\n    }]);\n\n    return CdkTableExporter;\n  }();\n\n  CdkTableExporter.ɵfac = function CdkTableExporter_Factory(t) {\n    return new (t || CdkTableExporter)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Renderer2), ɵngcc0.ɵɵdirectiveInject(ServiceLocatorService), ɵngcc0.ɵɵdirectiveInject(DataExtractorService), ɵngcc0.ɵɵdirectiveInject(undefined));\n  };\n\n  CdkTableExporter.ɵdir = /*@__PURE__*/ɵngcc0.ɵɵdefineDirective({\n    type: CdkTableExporter,\n    inputs: {\n      hiddenColumns: \"hiddenColumns\",\n      exporter: \"exporter\"\n    },\n    outputs: {\n      exportCompleted: \"exportCompleted\",\n      exportStarted: \"exportStarted\"\n    }\n  });\n  return CdkTableExporter;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n/*\r\n * Public API Surface of cdk-table-exporter\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { BOM, CHAR_SET_UTF, CHAR_SET_UTF_8, COMMA, CONTENT_TYPE_APPLICATION, CONTENT_TYPE_EXCEL, CONTENT_TYPE_TEXT, CdkTableExporter, CdkTableExporterModule, CsvExporterService, DOT, DataExtractorService, EXTENSION_CSV, EXTENSION_JSON, EXTENSION_TEXT, EXTENSION_XLS, EXTENSION_XLSX, ExportType, FileExporter, FileUtil, JsonExporterService, MAT_TABLE_EXPORTER, MIME_CSV, MIME_EXCEL_XLS, MIME_EXCEL_XLSX, MIME_JSON, MIME_TXT, Mime, REF, RETURN, ServiceLocatorService, TAB, TYPE_ARRAY, TxtExporterService, WorksheetExporter, XLSX_COLS, XLSX_LIGHTWEIGHT, XLS_REGEX, XlsExporterService, XlsxExporterService, SheetjsHelperService as ɵa }; //# sourceMappingURL=cdk-table-exporter.js.map","map":null,"metadata":{},"sourceType":"module"}